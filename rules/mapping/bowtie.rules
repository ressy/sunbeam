# -*- mode: Snakemake -*-

from sunbeamlib import index_files, igv, samtools

# Generate Snakemake template strings for a few commonly-used parameters below
INDICES = index_files('{genome}', Cfg['mapping']['genomes_fp'])
GENOME = str(Cfg['mapping']['genomes_fp'] / "{genome}.fasta")

rule bowtie2_all:
    # Create these three sets of files specifically:
    # * indexed sorted bam files
    # * bcf files
    # * screenshots of alignments made with IGV
    input: TARGET_MAPPING

rule bowtie2_build:
    message: "Creating bowtie2 index files for {input}"
    input: GENOME
    output: INDICES
    params:
        genome="{genome}",
        index_fp=str(Cfg['mapping']['genomes_fp'])
    shell: "cd {params.index_fp} && bowtie2-build {input} {params.genome}"

rule bowtie2_align:
    message: "Aligning {wildcards.sample} reads to genome {wildcards.genome}"
    input:
        rp = expand(str(Cfg['all']['data_fp'] / Cfg['all']['filename_fmt']), rp = ['R1','R2'], sample="{sample}"),
        indices = INDICES
    output: temp(str(MAPPING_FP/"{genome}-{sample}.sam"))
    threads: Cfg['mapping']['threads']
    params:
        genome="{genome}",
        index_fp=str(Cfg['mapping']['genomes_fp'])
    shell: "bowtie2 --threads {threads} -x {params.index_fp}/{params.genome} -1 {input.rp[0]} -2 {input.rp[1]} -S {output}"

rule samtools_view:
    message: "Converting {wildcards.genome}-{wildcards.sample} alignment from SAM to BAM format with samtools"
    input: str(MAPPING_FP/"{genome}-{sample}.sam")
    output: str(MAPPING_FP/"{genome}-{sample}.bam")
    threads: Cfg['mapping']['threads']
    shell: "samtools view -@ {threads} -bS {input} > {output}"

rule samtools_sort:
    message: "Sorting {input} with samtools"
    input: str(MAPPING_FP/"{genome}-{sample}.bam")
    output: str(MAPPING_FP/"{genome}-{sample}.sorted.bam")
    threads: Cfg['mapping']['threads']
    shell: "samtools sort -@ {threads} {input} > {output}"

rule samtools_get_coverage:
    message: "Tabulating coverage stats for {wildcards.genome}"
    input: expand(str(MAPPING_FP/"{{genome}}-{sample}.sorted.bam"), sample=Samples.keys())
    output: str(MAPPING_FP/"{genome}.coverage.csv")
    run:
        samtools.get_coverage_stats(wildcards.genome, input, Samples.keys(), output[0])

rule samtools_index:
    message: "Indexing {input} with samtools"
    input: str(MAPPING_FP/"{genome}-{sample}.sorted.bam")
    output: str(MAPPING_FP/"{genome}-{sample}.sorted.bam.bai")
    shell: "samtools index {input} {output}"

rule samtools_mpileup:
    message: "Calling variants for {input.bam} with samtools and bcftools"
    input:
        bam = str(MAPPING_FP/"{genome}-{sample}.sorted.bam"),
        genome = GENOME
    output: str(MAPPING_FP/"{genome}-{sample}.raw.bcf")
    shell: "samtools mpileup -gf {input.genome} {input.bam} | bcftools call -Ob -v -c - > {output}"

# I'm creating each segment snapshot separate, but really it could be done in
# one IGV run.  Can Snakemake handle that?
rule igv_snapshot:
    message: "Create an alignment image for {wildcards.genome}-{wildcards.segment} with IGV"
    input:
        igv_fp = str(Cfg['mapping']['igv_fp']),
        genome = GENOME,
        bams=expand(str(MAPPING_FP/"{{genome}}-{sample}.sorted.bam"), sample=Samples.keys()),
        bais=expand(str(MAPPING_FP/"{{genome}}-{sample}.sorted.bam.bai"), sample=Samples.keys())
    params:
        segment="{segment}",
        igv_prefs=Cfg['mapping']['igv_prefs']
    output:
        png=str(MAPPING_FP/"{genome}-{segment}.alignment.png")
    run:
        igv.render(input.genome, sorted(input.bams), output.png, params.segment,
                   input.igv_fp, "script", params.igv_prefs)
